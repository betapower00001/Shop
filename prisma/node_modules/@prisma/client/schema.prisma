generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String?
  password  String
  orders    Order[]
  cartItems CartItem[] // เพิ่มบรรทัดนี้
  payments  Payment[] // เพิ่มบรรทัดนี้ (ถ้าอยากเชื่อมกับ Payment ด้วย)
  createdAt DateTime   @default(now())
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int      @default(0) // ✅ เพิ่มฟิลด์ stock
  imageUrl    String? // ✅ เพิ่มฟิลด์ imageUrl (optional)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[] // ✅ ความสัมพันธ์กับรายการสินค้าทั้งหมด
  cartItems  CartItem[] // เพิ่มบรรทัดนี้
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      Int
  totalAmount Float
  status      String   @default("pending")
  createdAt   DateTime @default(now())

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[] // ✅ รายการสินค้าในคำสั่งซื้อนี้
  payment    Payment?
}

model OrderItem {
  id          Int   @id @default(autoincrement())
  orderId     Int
  productId   Int
  quantity    Int
  totalAmount Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Payment {
  id            Int      @id @default(autoincrement())
  orderId       Int      @unique
  amount        Float
  status        String
  paidAt        DateTime @default(now())
  userId        Int
  paymentMethod String // ควรใช้ชื่อเดียว (ลบ 'method' ถ้ามี)

  order Order @relation(fields: [orderId], references: [id])
  user  User  @relation(fields: [userId], references: [id]) // เพิ่ม relation กับ User ด้วย ถ้าต้องการ
}

model CartItem {
  id        Int @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@index([userId])
}
