// src/app/checkout/page.tsx

"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useCartStore } from "@/store/cartStore";
import { useSession } from "next-auth/react";

export default function CheckoutPage() {
  const { items, totalPrice, setItems } = useCartStore();
  const router = useRouter();
  const { data: session, status } = useSession();

  const userId = session?.user?.id;

  const [name, setName] = useState("");
  const [address, setAddress] = useState("");
  const [phone, setPhone] = useState("");
  const [paymentMethod, setPaymentMethod] = useState("bank_transfer");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");

  useEffect(() => {
    const validateCartItems = async () => {
      const validItems = [];

      for (const item of items) {
        const res = await fetch(`/api/products/${item.productId}`);
        if (res.ok) {
          validItems.push(item);
        }
      }

      if (validItems.length !== items.length) {
        setItems(validItems);
      }
    };

    validateCartItems();
  }, [items, setItems]);

  useEffect(() => {
    if (!userId) return;

    async function fetchUser() {
      try {
        const res = await fetch(`/api/user/${userId}`);
        if (!res.ok) throw new Error(await res.text());
        const user = await res.json();
        setName(user.name || "");
        setAddress(user.address || "");
        setPhone(user.phone || "");
      } catch (error: any) {
        console.error("Fetch user error:", error);
        setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
      }
    }

    fetchUser();
  }, [userId]);

  const handleCheckout = async () => {
    if (!userId || !name || !address || !phone || items.length === 0) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return;
    }

    const confirm = window.confirm("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?");
    if (!confirm) return;

    setIsLoading(true);

    try {
      const res = await fetch("/api/checkout", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          userId,
          shippingName: name,
          shippingAddress: address,
          shippingPhone: phone,
          totalAmount: totalPrice,
          paymentMethod,
          orderItems: items.map((item) => ({
            productId: item.productId,
            quantity: item.quantity,
            totalAmount: item.price * item.quantity,
          })),
        }),
      });

      if (!res.ok) throw new Error(await res.text());

      const { orderId } = await res.json();

      switch (paymentMethod) {
        case "bank_transfer":
          router.push(`/payments/upload-slip?orderId=${orderId}`);
          break;
        case "credit_card":
          router.push(`/payments/credit-card?orderId=${orderId}`);
          break;
        case "cod":
          alert("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö");
          router.push("/order-success");
          break;
      }
    } catch (error: any) {
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const renderPaymentInfo = () => {
    switch (paymentMethod) {
      case "bank_transfer":
        return <p className="text-sm text-gray-600 mt-1">üí∏ ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ</p>;
      case "credit_card":
        return <p className="text-sm text-gray-600 mt-1">üí≥ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á</p>;
      case "cod":
        return <p className="text-sm text-gray-600 mt-1">üì¶ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏±‡∏î‡∏™‡πà‡∏á (COD)</p>;
    }
  };

  if (status === "loading") return <p className="text-center mt-10">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ...</p>;
  if (!session) return <p className="text-center mt-10">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>;

  return (
    <div className="max-w-md mx-auto p-4">
      <h1 className="text-xl font-bold mb-4">‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h1>

      <ul className="mb-4">
        {items.length === 0 && <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</p>}
        {items.map((item) => (
          <li key={item.id} className="py-2 border-b">
            <div className="flex justify-between">
              <span>{item.name} (x{item.quantity})</span>
              <span>‡∏ø{item.price.toFixed(2)}</span>
            </div>
            <div className="text-right text-sm text-gray-500">
              ‡∏£‡∏ß‡∏°: ‡∏ø{(item.price * item.quantity).toFixed(2)}
            </div>
          </li>
        ))}
      </ul>

      <div className="font-bold mb-4">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ‡∏ø{totalPrice.toFixed(2)}</div>

      <div className="mb-4 space-y-3">
        <div>
          <label className="block mb-1 font-medium">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö:</label>
          <input
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-full border px-2 py-1"
            placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö"
          />
        </div>
        <div>
          <label className="block mb-1 font-medium">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:</label>
          <textarea
            value={address}
            onChange={(e) => setAddress(e.target.value)}
            className="w-full border px-2 py-1"
            rows={2}
            placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
          />
        </div>
        <div>
          <label className="block mb-1 font-medium">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</label>
          <input
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
            className="w-full border px-2 py-1"
            placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"
          />
        </div>
        <div>
          <label className="block mb-1 font-medium">‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</label>
          <input
            value={session?.user?.email ?? ""}
            readOnly
            className="w-full border px-2 py-1 bg-gray-100 text-gray-500"
          />
        </div>
      </div>

      <div className="mb-4">
        <label className="block mb-1 font-medium">‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:</label>
        <select
          value={paymentMethod}
          onChange={(e) => setPaymentMethod(e.target.value)}
          className="w-full border px-2 py-1"
        >
          <option value="bank_transfer">üí∏ ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</option>
          <option value="credit_card">üí≥ ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</option>
          <option value="cod">üì¶ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á</option>
        </select>
        {renderPaymentInfo()}
      </div>

      <button
        onClick={handleCheckout}
        disabled={isLoading || items.length === 0}
        className="bg-blue-600 text-white px-4 py-2 rounded w-full disabled:opacity-50"
      >
        {isLoading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£..." : "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"}
      </button>
    </div>
  );
}
